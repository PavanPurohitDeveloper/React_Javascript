https://code.visualstudio.com
https://github.com
https://github.com/Akashdeveloper
https://nodejs.org/en/


19th February 2020:
====================
> git remote -v // tells which folder you have put code in.
origin  https://github.com/pavan-purohit/React_Javascript.git (fetch)
origin  https://github.com/pavan-purohit/React_Javascript.git (push)

npmjs -- There are more than 12 lac packages available. search react
https://www.npmjs.com/search?q=react
These packages refer to your code/appln library/someone else has written which we can consume.
Around 1,14,458 packages found for react.. Every language they have packages..
These packages are opensource.. 

//Local package or Dependency Or node_modules ( node_modules is folder name)
That particular folder is referred for one application.
90% packages will go locally.
local package is particular to the folder.

//Global package
Global packages are Installed in system.. These packages are system packages.. I can use for every application.
Global can be used for any folder.
only 10% packages will go globally. Global Packages that helps us to :
> To setup.
> To Run the appln.
> To Build the appln.

/*****************************
Steps to Install local package
******************************
1. Must install Nodejs.
Step1# Create package.json file in the folder -- OneTime exercise
Step 2# Navigate to the folder where you want to install using cmd/terminal
Step 3# Write npm install <packagename> Or npm i <packagename> Or npm i <packagename> --save
Or npm i <packagename> --save-dev


> npm install zone.js --> It went to the npm repository and searched for zone.js package 
						  and installed code to our folder called node_modules.
	 In package.json file , by defauly automatically it add the dependencies for zone.js

> npm install react
If you install one, you get other packages installed.. those are called internal dependencies..

==> package-lock.json --> is an informative file..conatins child dependencies..
						  All those packages which are coming as a child dependencies will be there..
						  If you dont have this file also appln will run still..
						  
==> zone.js and react are parent dependencies and rest are child dependencies..
==> Main dependencies will be part of package.json file..
==> When you push the code to github alos, you will not push the node_modules folder also..
	we never push node_modules folder to GIT.
	
> npm install --> It automatically will go to package.json file and downloaded all the packages for you 
		inside node_modules folder. Based on whatever you specified in dependencies inside package.json file
     If the dependencies are part of package.json then  automatically install all the packages for you inside node_modules folder.

How to manage versions:?
-----------------------------		
 "dependencies": {
    "react": "^16.12.0",
    "zone.js": "^0.10.2"
  }
 
"react": "^16.12.0"  --> when we use capsymbol, It always check for the latest version. It will do major updates.
"react": "16.12.0"  ---> Its going to install exact this version always. We always go with static package version..
"react": "~16.12.0"  ---> If you use tild icon, 16. something will be installed whatever latest version. It will not install 17 version.

If you want to install specific version of package ?
---------------------------------------------------
npm install react@16.1.1 --> It will install this version only
npm install react --> It will install latest version.

/*****************************
Steps to Install Global package
******************************
Its going to install in system node_modules folder.
The installed package will not appear in the package.json
*** Global dependencies/package will not be part of package.json.
Those packages you need system access to install globally.
For production you dont need globally packages.

## For windows
Step1 - Run cmd as administrator.
Step2 - npm install -g <package_name>     ( -g stands for global )
		Ex: npm install -g @aakashdeveloper/create-node-app
		
## For Mac/Linux/Unix
Step1 - Open terminal
Step2 - sudo npm install -g @aakashdeveloper/create-node-app

==> mention in Readme.md file --> Install global package. but you never add that in the package.json

## For Win
//one time run//
Step1 - Run cmd as administrator.
Step2 - npm install -g create-react-app ( Install the global package )

//Next all time
Step3 - Navigate to the folder where you want to create an application using cmd/terminal.
Step4 - create-react-app <appname>
Step5 - cd <appname>
Step6 - npm start ( It automatically start the appln and open the browser on port 3000 )

Ex:
> create-react-app firstapp
  Very first file it generates package.json file
  It installing the packages for us automatically.
  you see folders like -- node_modules, public, src, package.json

20 February 2020:
=================
These are 3 main important packages
npm i react-scripts
npm i react
npm i react-dom

These 2 gives information about the appln.
eslintConfig --> This helps in giving warning to correct your syntax.
browserslist --> what all browsers support.

==> scripts and dependencies are important in package.json file
Readme.md --> Basically a information file

src folder -- ALl the code of the appln.

Inside public folder:
index.html file --ALl the content of the appln will load here. All the html content will load in this div 
					<div id="root"></div>
manifest.json file --> Basically a metadata of the appln. we dont need this file.
robots.txt file --> style of a text/font
package.json --> is the package dependency
.gitignore --> All those things dont want to push to GIT will keep in this .gitignore file.


///Component ////
Each page is referred as One Component
Component have its own logic, html and CSS
We can also have nested Component.

3 types of Component:
-----------------------
1. Class Based Component
2. Functional Component
3. Hooks Component

Functional Component:
-----------------------
1. are light in weight as compare to Class Based Component. 
light  means they load faster. They are less heavy. Anythung is heavy, it takes time to load.
2. are Dumb/Display Component ( are used to display the content )
3. Cannot handle State.

Class Based Component:
-----------------------
1. are Heavy in weight as compare to Functional. Bit heavy
2. are Logical Component ( mainly used to write a logic )
Suppose you call the API to write a logic to get the data, the data you fetch in a class based Component and 
pass it to the functional Component to display.
In React, There is no html file.. We keep one file as Logical file and One File is the display file.
3. Can Handle State.

//ES6 way: we use this below syntax to write Functional Component
const add = (a,b) => {return a+b}
add(1,2)

//we use this below syntax to write Class Based Component
class Add {
	constructor(a, b){ 
	   this.sum = a+b
	} 
}

State & Props:
----------------
There are 2 Component - Component A and Component B
State => Is a Local variable. Every Component will have State variable but it should be Class Component.
Functional Component cannot handle State.

Component A	  ==>prop==>    Component B
State1 = "a"				State2 = ""
If I want to pass a data from Component A to Component B then we use Prop.
prop help you to send data from one Component to another Component. We can pass State as a prop to Functional Component.

There are 3 most important packages/library:
---------------------------------------------
react
react-dom
react-scripts

react --> is my main library. is JavaScript library for building user interface. ( This is the library )
react-dom --> is package for working with DOM. 
		      help you to display. whatever content I write I want to display in index.html file. ( This help to display )
react-scripts --> is for Configuration scripts for Create React App. helps you to run the application. ( This help to run )
				  Behind the scene it knows which is the main file *.js to pick ( it looks for webpack.config.js file )
				  https://github.com/Aakashdeveloper/React_With_TypeScript

*** Note:==> It is not possible to return html from JavaScript. But here in React we can return but we call them JSX.
JSX (JavaScript XML ) --> JSX refer as when you write html inside the JavaScript that content is referred as JSX. 
						  you returning as JSX

import React from '<react>';
import ReactDOM from '<package_name>'; // This ReactDOM will be only in your main file (index.js) Not in every file *.js.
										  No other file will have ReactDOM.


==> If you have more than one tag wrap them in one parent tag ( like div tag ).
EX: index.js

//Functional component
const Home = () => {
    return(
        <h1>This is React App Training</h1>       
    )
}

ReactDOM.render( //ReactDOM.render() is the method to display data
        <Home/>,document.getElementById('root')
);

*** Every other component apart from main component to be exported. Only main file will have render().. 
Ex: Insider Header.js file --> export default Header;
Component name must be captital letter initial one. Ex: Header. file name can be header.js...
First Component will render, Second Component will export..If we have multiple Components we use router.

21st February 2020:  
====================  
/Class based Component way
class Header extends Component {

    render() {
        return (
            <div>
                <center>
                    <h1>React APP</h1>
                </center>
                <hr />
            </div>
        )
    }
}

*** Component will come in the curly braces {} ... 
render() -- method comes from Component

1. Functional component
2. Class based component  -- has contructor
No difference b/w functional based component and Class based component...

### constructor:-  is always the first thing that called inside the class.. Initialize the values..
All the declarations we do here...Initialize the variable/function/object..
When you load your page the first thing that got called is class thru Constructor.
state declaration will happens inside the constructor. state is a local variable. 
multiple variables we can define inside state..

Constructor is the first thing that will execute. Inside Constructor we define state.
this.state --> is something we want to be there always.

To declarae the variable inside the state:-
--------------------------------------------
this.state={ //this is the state you define as Object, In that variable called state variable.
	title:'My React App'
}

super() -- helps to take the value from the Component/parent class. This is required inside constructor.
			Component is an interface.

binding/Interpolation -- {this.state.title}

How to add the CSS to the component?
---------------------------------
By using Inline view way
By using separate CSS file
==> In the react we use className='logo'

render() {
        // const mystyles = 10
        const mystyles = {
            headers:{
                backgroundColor:'teal'
            },
            logo:{
                fontSize:'30px',
                color:'#fff',
                textAlign:'center'
            }
        }

        return (
            <div>
                <center>
                    {/* <h1>React APP</h1> */}
                    <h1>{this.state.title}</h1>
                    <h2>{this.state.details}</h2>
                    {/* <h2>{mystyles}</h2> */}
                </center>
                <hr />
            </div>
        )
    }
	
BY using CSS:
Class -- when you have to give common to the multiple tags.
Id -- when you want to refer unique element id
Tag - This is only for tag

==> index.js file should be inside root of src folder. rest all should be inside component folder.

